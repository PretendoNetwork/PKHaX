using System;
using System.IO;
using System.Text;
using System.Net;
using System.Threading.Tasks;
using PKHeX.Core;

namespace PKHaX {
	class Server {
		public static HttpListener listener;
		
		public static string protocol = "http";
		public static int port = 80;

		public static byte[] ILLEGAL_POKEMON_MAGIC = new byte[] { 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0A };
		public static byte[] LEGAL_POKEMON_MAGIC = new byte[] { 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 };
		public static byte[] POKEMON_SIG = new byte[] {
			0x7E, 0x1B, 0xE6, 0x53, 0x6A, 0xB5, 0x51, 0xD8, 0x9C, 0xB4, 0x61, 0xA7,
			0x9D, 0xDE, 0x57, 0x06, 0x5C, 0x57, 0x41, 0x73, 0x6C, 0x0D, 0x4C, 0x24,
			0x52, 0xAD, 0x09, 0x34, 0xE7, 0xC8, 0xD2, 0x88, 0x76, 0xCC, 0x0C, 0x74,
			0x79, 0x27, 0x59, 0x1B, 0xC2, 0x84, 0x46, 0x26, 0x2E, 0x43, 0xA9, 0xCF,
			0x54, 0xDA, 0xDD, 0x82, 0x65, 0x27, 0xAA, 0xFD, 0xAF, 0x37, 0x4C, 0xCE,
			0x8A, 0xAC, 0x13, 0x41, 0x3C, 0x5C, 0x32, 0xFB, 0xDA, 0x4D, 0xDF, 0xB9,
			0x46, 0xC8, 0x77, 0x52, 0x26, 0x03, 0x6C, 0xA3, 0x6A, 0xC8, 0xA7, 0xA8,
			0xCD, 0x6B, 0x17, 0xF6, 0x60, 0x93, 0xFD, 0x32, 0x48, 0x54, 0x1E, 0x8F,
			0x44, 0xCB, 0x9B, 0x51, 0xFA, 0x1F, 0xBD, 0x5E, 0xF2, 0xBD, 0x73, 0xD2,
			0xDA, 0xAE, 0x9E, 0x1D, 0x37, 0x63, 0xD3, 0xF7, 0xDF, 0xF8, 0xF0, 0xEB,
			0x52, 0x2F, 0x6A, 0x76, 0x2A, 0x13, 0xEB, 0xAF, 0x31, 0x05, 0x58, 0x9E,
			0xDC, 0x95, 0xC4, 0x69, 0x53, 0x34, 0xBC, 0x2C, 0xEB, 0x63, 0x2C, 0xAE,
			0x97, 0xA2, 0xCA, 0xDC, 0x3C, 0x6D, 0x57, 0xFA, 0x9C, 0xAC, 0xF3, 0xA9,
			0x67, 0x4E, 0x16, 0x53, 0xA9, 0xFA, 0x95, 0xF0, 0x55, 0xB4, 0x70, 0x42,
			0x1E, 0x1F, 0x65, 0xD6, 0xF6, 0x3D, 0x69, 0x6B, 0xF7, 0xCD, 0x45, 0xBC,
			0x69, 0xE0, 0xB9, 0x14, 0x8A, 0xC9, 0x35, 0x56, 0x4B, 0xE8, 0x3D, 0x29,
			0x9A, 0xF5, 0xCB, 0xEB, 0x2A, 0x14, 0x8D, 0x96, 0x1C, 0x42, 0x09, 0x7D,
			0xED, 0xEB, 0xA7, 0x00, 0xEE, 0xA4, 0x0D, 0x65, 0x26, 0x3C, 0xDE, 0x47,
			0x83, 0x64, 0x90, 0xE1, 0xA7, 0x11, 0x4C, 0xDA, 0x12, 0x64, 0x97, 0xA8,
			0xED, 0x9F, 0xC8, 0xFE, 0x12, 0x65, 0x78, 0xB2, 0x60, 0x86, 0xE0, 0x02,
			0x28, 0xC4, 0x5A, 0x17, 0x7B, 0xE4, 0xBF, 0xA3, 0x10, 0x51, 0x18, 0x9E,
			0x9A, 0xEB, 0xEC, 0x63
		};

		public static async Task HandleIncomingConnections() {
			while (true) {
				HttpListenerContext ctx = await listener.GetContextAsync();

				HttpListenerRequest req = ctx.Request;
				HttpListenerResponse resp = ctx.Response;

				resp.StatusCode = 404;

				if ((req.HttpMethod == "POST") && (req.Url.AbsolutePath == "/validator/v1/validate")) {
					MemoryStream ms = new MemoryStream();
					req.InputStream.CopyTo(ms);

					byte[] body = ms.ToArray();

					byte[] serviceToken = new byte[0x58];
					byte[] unknown = new byte[0xA7];
					byte[] encryptedPkm = new byte[0xE8];

					Array.Copy(body, 0, serviceToken, 0, 0x58);
					Array.Copy(body, 0x58, unknown, 0, 0xA7);
					Array.Copy(body, 0x58 + 0xA7, encryptedPkm, 0, 0xE8);

					var pkm = new PK6(encryptedPkm);
					var la = new LegalityAnalysis(pkm);

					byte[] responseData;

					if (la.Valid) {
						responseData = new byte[0x107];
						Array.Copy(LEGAL_POKEMON_MAGIC, 0, responseData, 0, LEGAL_POKEMON_MAGIC.Length);
						Array.Copy(POKEMON_SIG, 0, responseData, LEGAL_POKEMON_MAGIC.Length, POKEMON_SIG.Length);

						// Real server sends back an RSA-256 signature here
						// after the magic

						// We do not have the private key, and the public key
						// is requested one time when making a new save and
						// stored in the save file, making it risky to patch

						// Leaving signature as all null bytes for now
					} else {
						responseData = new byte[0x07];
						Array.Copy(ILLEGAL_POKEMON_MAGIC, 0, responseData, 0, ILLEGAL_POKEMON_MAGIC.Length);
					}

					resp.ContentLength64 = responseData.LongLength;
					resp.StatusCode = 200;

					await resp.OutputStream.WriteAsync(responseData, 0, responseData.Length);
				}

				resp.Close();
			}
		}

		public static void Main(string[] args) {
			string prefix = string.Format("{0}://*:{1}/", protocol, port);

			listener = new HttpListener();

			listener.Prefixes.Add(prefix);
			listener.Start();

			Console.WriteLine("Server listening on {0}", prefix);

			Task listenTask = HandleIncomingConnections();

			listenTask.GetAwaiter().GetResult();

			listener.Close();
		}
	}
}
